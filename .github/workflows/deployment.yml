name: Langauge Learning CI/CD Pipeline

# When push to staging branch or when create tag starting with v-*
on:
    push:
        branches:
            - staging
    create:
        tags:
            - 'v*'

jobs:
    # jobs run test and deploy to stating server
    deploy_staging:
        if: github.ref == 'refs/heads/staging'
        runs-on: ubuntu-latest # operating system our steps will run on
        # job steps
        steps:
            # Checkout the repo
            - name: Checkout
              uses: actions/checkout@v2
            # Set up Python
            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                  python-version: '3.12' # Python version we use in the project
            # Install dependencies
            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
            # Install SSH Key
            - name: Install SSH Key
              run: |
                    install -m 600 -D /dev/null ~/.ssh/id_rsa
                    echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
                    ssh-keyscan -H ${{ secrets.STAGING_HOST }} > ~/.ssh/known_hosts
            # Run tests
            - name: Run tests
              run: |
                  pytest
            - name: Deploy to staging
              if: success() # if successfully passed the tests
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_KEY }}
                  STAGING_HOST: ${{ secrets.STAGING_HOST }}
                  STAGING_USER: ${{ secrets.STAGING_USER }}
              run: |
                  ssh $STAGING_USER@$STAGING_HOST "
                    cd /var/project/staging &&
                    git pull origin staging &&
                    python3 -m venv venv &&
                    source venv/bin/activate &&
                    pip install -r requirements.txt &&
                    sudo systemctl restart staging-app.service
                  "
    deploy_production:
        if: startsWith(github.ref, 'refs/tags/v')
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.ref }}
            - name: Check if tag is on main branch
              run: |
                git fetch origin main
                if ! git merge-base --is-ancestor ${{ github.sha }} origin/main; then
                  echo "This tag is not based on the main branch. Exiting..."
                  exit 1
                fi
            # Set up Python
            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.12' # Python version we use in the project
            # Install dependencies
            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
            # Install SSH Key
            - name: Install SSH Key
              run: |
                    install -m 600 -D /dev/null ~/.ssh/id_rsa
                    echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
                    ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} > ~/.ssh/known_hosts
            # Run tests
            - name: Run tests
              run: |
                  pytest
            - name: Deploy to production
              if: success() # if successfully passed the tests
              env:
                  PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
                  PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
              run: |
                  ssh $PRODUCTION_USER@$PRODUCTION_HOST "
                    cd /var/project/production &&
                    git fetch --tags &&
                    git checkout ${{ github.ref }} &&
                    python3 -m venv venv &&
                    source venv/bin/activate &&
                    pip install -r requirements.txt &&
                    sudo systemctl restart production-app.service
                  "
